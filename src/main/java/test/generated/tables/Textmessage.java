/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Login;
import test.generated.tables.records.TextmessageRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Textmessage extends TableImpl<TextmessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>login.textmessage</code>
     */
    public static final Textmessage TEXTMESSAGE = new Textmessage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TextmessageRecord> getRecordType() {
        return TextmessageRecord.class;
    }

    /**
     * The column <code>login.textmessage.groupID</code>.
     */
    public final TableField<TextmessageRecord, Integer> GROUPID = createField(DSL.name("groupID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>login.textmessage.messageID</code>.
     */
    public final TableField<TextmessageRecord, Integer> MESSAGEID = createField(DSL.name("messageID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>login.textmessage.date</code>.
     */
    public final TableField<TextmessageRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>login.textmessage.senderID</code>.
     */
    public final TableField<TextmessageRecord, Integer> SENDERID = createField(DSL.name("senderID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>login.textmessage.context</code>.
     */
    public final TableField<TextmessageRecord, String> CONTEXT = createField(DSL.name("context"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>login.textmessage.file</code>.
     */
    public final TableField<TextmessageRecord, JSON> FILE = createField(DSL.name("file"), SQLDataType.JSON, this, "");

    /**
     * The column <code>login.textmessage.edited</code>.
     */
    public final TableField<TextmessageRecord, Byte> EDITED = createField(DSL.name("edited"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>login.textmessage.replyTo</code>.
     */
    public final TableField<TextmessageRecord, Integer> REPLYTO = createField(DSL.name("replyTo"), SQLDataType.INTEGER.defaultValue(DSL.inline("-1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>login.textmessage.isHTML</code>.
     */
    public final TableField<TextmessageRecord, Byte> ISHTML = createField(DSL.name("isHTML"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    private Textmessage(Name alias, Table<TextmessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Textmessage(Name alias, Table<TextmessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>login.textmessage</code> table reference
     */
    public Textmessage(String alias) {
        this(DSL.name(alias), TEXTMESSAGE);
    }

    /**
     * Create an aliased <code>login.textmessage</code> table reference
     */
    public Textmessage(Name alias) {
        this(alias, TEXTMESSAGE);
    }

    /**
     * Create a <code>login.textmessage</code> table reference
     */
    public Textmessage() {
        this(DSL.name("textmessage"), null);
    }

    public <O extends Record> Textmessage(Table<O> child, ForeignKey<O, TextmessageRecord> key) {
        super(child, key, TEXTMESSAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Login.LOGIN;
    }

    @Override
    public Identity<TextmessageRecord, Integer> getIdentity() {
        return (Identity<TextmessageRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TextmessageRecord> getPrimaryKey() {
        return Keys.KEY_TEXTMESSAGE_PRIMARY;
    }

    @Override
    public Textmessage as(String alias) {
        return new Textmessage(DSL.name(alias), this);
    }

    @Override
    public Textmessage as(Name alias) {
        return new Textmessage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Textmessage rename(String name) {
        return new Textmessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Textmessage rename(Name name) {
        return new Textmessage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, LocalDateTime, Integer, String, JSON, Byte, Integer, Byte> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
