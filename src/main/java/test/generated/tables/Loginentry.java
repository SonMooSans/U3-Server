/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Login;
import test.generated.tables.records.LoginentryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Loginentry extends TableImpl<LoginentryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>login.loginentry</code>
     */
    public static final Loginentry LOGINENTRY = new Loginentry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LoginentryRecord> getRecordType() {
        return LoginentryRecord.class;
    }

    /**
     * The column <code>login.loginentry.email</code>.
     */
    public final TableField<LoginentryRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>login.loginentry.password</code>.
     */
    public final TableField<LoginentryRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>login.loginentry.token</code>.
     */
    public final TableField<LoginentryRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>login.loginentry.userID</code>.
     */
    public final TableField<LoginentryRecord, Integer> USERID = createField(DSL.name("userID"), SQLDataType.INTEGER, this, "");

    private Loginentry(Name alias, Table<LoginentryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Loginentry(Name alias, Table<LoginentryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>login.loginentry</code> table reference
     */
    public Loginentry(String alias) {
        this(DSL.name(alias), LOGINENTRY);
    }

    /**
     * Create an aliased <code>login.loginentry</code> table reference
     */
    public Loginentry(Name alias) {
        this(alias, LOGINENTRY);
    }

    /**
     * Create a <code>login.loginentry</code> table reference
     */
    public Loginentry() {
        this(DSL.name("loginentry"), null);
    }

    public <O extends Record> Loginentry(Table<O> child, ForeignKey<O, LoginentryRecord> key) {
        super(child, key, LOGINENTRY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Login.LOGIN;
    }

    @Override
    public UniqueKey<LoginentryRecord> getPrimaryKey() {
        return Keys.KEY_LOGINENTRY_PRIMARY;
    }

    @Override
    public Loginentry as(String alias) {
        return new Loginentry(DSL.name(alias), this);
    }

    @Override
    public Loginentry as(Name alias) {
        return new Loginentry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Loginentry rename(String name) {
        return new Loginentry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Loginentry rename(Name name) {
        return new Loginentry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
