/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Login;
import test.generated.tables.records.CustomemojiRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customemoji extends TableImpl<CustomemojiRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>login.customemoji</code>
     */
    public static final Customemoji CUSTOMEMOJI = new Customemoji();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomemojiRecord> getRecordType() {
        return CustomemojiRecord.class;
    }

    /**
     * The column <code>login.customemoji.ID</code>.
     */
    public final TableField<CustomemojiRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>login.customemoji.creatorID</code>.
     */
    public final TableField<CustomemojiRecord, Integer> CREATORID = createField(DSL.name("creatorID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>login.customemoji.name</code>.
     */
    public final TableField<CustomemojiRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    private Customemoji(Name alias, Table<CustomemojiRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customemoji(Name alias, Table<CustomemojiRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>login.customemoji</code> table reference
     */
    public Customemoji(String alias) {
        this(DSL.name(alias), CUSTOMEMOJI);
    }

    /**
     * Create an aliased <code>login.customemoji</code> table reference
     */
    public Customemoji(Name alias) {
        this(alias, CUSTOMEMOJI);
    }

    /**
     * Create a <code>login.customemoji</code> table reference
     */
    public Customemoji() {
        this(DSL.name("customemoji"), null);
    }

    public <O extends Record> Customemoji(Table<O> child, ForeignKey<O, CustomemojiRecord> key) {
        super(child, key, CUSTOMEMOJI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Login.LOGIN;
    }

    @Override
    public Identity<CustomemojiRecord, Integer> getIdentity() {
        return (Identity<CustomemojiRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CustomemojiRecord> getPrimaryKey() {
        return Keys.KEY_CUSTOMEMOJI_PRIMARY;
    }

    @Override
    public Customemoji as(String alias) {
        return new Customemoji(DSL.name(alias), this);
    }

    @Override
    public Customemoji as(Name alias) {
        return new Customemoji(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customemoji rename(String name) {
        return new Customemoji(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customemoji rename(Name name) {
        return new Customemoji(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
