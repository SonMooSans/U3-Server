/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Login;
import test.generated.tables.records.InvitecodeRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Invitecode extends TableImpl<InvitecodeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>login.invitecode</code>
     */
    public static final Invitecode INVITECODE = new Invitecode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvitecodeRecord> getRecordType() {
        return InvitecodeRecord.class;
    }

    /**
     * The column <code>login.invitecode.groupID</code>.
     */
    public final TableField<InvitecodeRecord, Integer> GROUPID = createField(DSL.name("groupID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>login.invitecode.code</code>.
     */
    public final TableField<InvitecodeRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(15).nullable(false), this, "");

    private Invitecode(Name alias, Table<InvitecodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Invitecode(Name alias, Table<InvitecodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>login.invitecode</code> table reference
     */
    public Invitecode(String alias) {
        this(DSL.name(alias), INVITECODE);
    }

    /**
     * Create an aliased <code>login.invitecode</code> table reference
     */
    public Invitecode(Name alias) {
        this(alias, INVITECODE);
    }

    /**
     * Create a <code>login.invitecode</code> table reference
     */
    public Invitecode() {
        this(DSL.name("invitecode"), null);
    }

    public <O extends Record> Invitecode(Table<O> child, ForeignKey<O, InvitecodeRecord> key) {
        super(child, key, INVITECODE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Login.LOGIN;
    }

    @Override
    public UniqueKey<InvitecodeRecord> getPrimaryKey() {
        return Keys.KEY_INVITECODE_PRIMARY;
    }

    @Override
    public Invitecode as(String alias) {
        return new Invitecode(DSL.name(alias), this);
    }

    @Override
    public Invitecode as(Name alias) {
        return new Invitecode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Invitecode rename(String name) {
        return new Invitecode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Invitecode rename(Name name) {
        return new Invitecode(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
