/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Login;
import test.generated.tables.records.UserdataRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Userdata extends TableImpl<UserdataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>login.userdata</code>
     */
    public static final Userdata USERDATA = new Userdata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserdataRecord> getRecordType() {
        return UserdataRecord.class;
    }

    /**
     * The column <code>login.userdata.ID</code>.
     */
    public final TableField<UserdataRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>login.userdata.Name</code>.
     */
    public final TableField<UserdataRecord, String> NAME = createField(DSL.name("Name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>login.userdata.Avatar</code>.
     */
    public final TableField<UserdataRecord, String> AVATAR = createField(DSL.name("Avatar"), SQLDataType.CLOB, this, "");

    private Userdata(Name alias, Table<UserdataRecord> aliased) {
        this(alias, aliased, null);
    }

    private Userdata(Name alias, Table<UserdataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>login.userdata</code> table reference
     */
    public Userdata(String alias) {
        this(DSL.name(alias), USERDATA);
    }

    /**
     * Create an aliased <code>login.userdata</code> table reference
     */
    public Userdata(Name alias) {
        this(alias, USERDATA);
    }

    /**
     * Create a <code>login.userdata</code> table reference
     */
    public Userdata() {
        this(DSL.name("userdata"), null);
    }

    public <O extends Record> Userdata(Table<O> child, ForeignKey<O, UserdataRecord> key) {
        super(child, key, USERDATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Login.LOGIN;
    }

    @Override
    public Identity<UserdataRecord, Integer> getIdentity() {
        return (Identity<UserdataRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserdataRecord> getPrimaryKey() {
        return Keys.KEY_USERDATA_PRIMARY;
    }

    @Override
    public Userdata as(String alias) {
        return new Userdata(DSL.name(alias), this);
    }

    @Override
    public Userdata as(Name alias) {
        return new Userdata(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Userdata rename(String name) {
        return new Userdata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Userdata rename(Name name) {
        return new Userdata(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
