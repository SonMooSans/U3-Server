/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Login;
import test.generated.tables.records.FriendRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Friend extends TableImpl<FriendRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>login.friend</code>
     */
    public static final Friend FRIEND = new Friend();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FriendRecord> getRecordType() {
        return FriendRecord.class;
    }

    /**
     * The column <code>login.friend.FirstUserID</code>.
     */
    public final TableField<FriendRecord, Integer> FIRSTUSERID = createField(DSL.name("FirstUserID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>login.friend.SecondUserID</code>.
     */
    public final TableField<FriendRecord, Integer> SECONDUSERID = createField(DSL.name("SecondUserID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>login.friend.PrivateGroupID</code>.
     */
    public final TableField<FriendRecord, Integer> PRIVATEGROUPID = createField(DSL.name("PrivateGroupID"), SQLDataType.INTEGER, this, "");

    private Friend(Name alias, Table<FriendRecord> aliased) {
        this(alias, aliased, null);
    }

    private Friend(Name alias, Table<FriendRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>login.friend</code> table reference
     */
    public Friend(String alias) {
        this(DSL.name(alias), FRIEND);
    }

    /**
     * Create an aliased <code>login.friend</code> table reference
     */
    public Friend(Name alias) {
        this(alias, FRIEND);
    }

    /**
     * Create a <code>login.friend</code> table reference
     */
    public Friend() {
        this(DSL.name("friend"), null);
    }

    public <O extends Record> Friend(Table<O> child, ForeignKey<O, FriendRecord> key) {
        super(child, key, FRIEND);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Login.LOGIN;
    }

    @Override
    public UniqueKey<FriendRecord> getPrimaryKey() {
        return Keys.KEY_FRIEND_PRIMARY;
    }

    @Override
    public Friend as(String alias) {
        return new Friend(DSL.name(alias), this);
    }

    @Override
    public Friend as(Name alias) {
        return new Friend(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Friend rename(String name) {
        return new Friend(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Friend rename(Name name) {
        return new Friend(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
