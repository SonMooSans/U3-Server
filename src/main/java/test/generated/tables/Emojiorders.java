/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Login;
import test.generated.tables.records.EmojiordersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Emojiorders extends TableImpl<EmojiordersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>login.emojiorders</code>
     */
    public static final Emojiorders EMOJIORDERS = new Emojiorders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmojiordersRecord> getRecordType() {
        return EmojiordersRecord.class;
    }

    /**
     * The column <code>login.emojiorders.userID</code>.
     */
    public final TableField<EmojiordersRecord, Integer> USERID = createField(DSL.name("userID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>login.emojiorders.emojiID</code>.
     */
    public final TableField<EmojiordersRecord, Integer> EMOJIID = createField(DSL.name("emojiID"), SQLDataType.INTEGER.nullable(false), this, "");

    private Emojiorders(Name alias, Table<EmojiordersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Emojiorders(Name alias, Table<EmojiordersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>login.emojiorders</code> table reference
     */
    public Emojiorders(String alias) {
        this(DSL.name(alias), EMOJIORDERS);
    }

    /**
     * Create an aliased <code>login.emojiorders</code> table reference
     */
    public Emojiorders(Name alias) {
        this(alias, EMOJIORDERS);
    }

    /**
     * Create a <code>login.emojiorders</code> table reference
     */
    public Emojiorders() {
        this(DSL.name("emojiorders"), null);
    }

    public <O extends Record> Emojiorders(Table<O> child, ForeignKey<O, EmojiordersRecord> key) {
        super(child, key, EMOJIORDERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Login.LOGIN;
    }

    @Override
    public UniqueKey<EmojiordersRecord> getPrimaryKey() {
        return Keys.KEY_EMOJIORDERS_PRIMARY;
    }

    @Override
    public Emojiorders as(String alias) {
        return new Emojiorders(DSL.name(alias), this);
    }

    @Override
    public Emojiorders as(Name alias) {
        return new Emojiorders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Emojiorders rename(String name) {
        return new Emojiorders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Emojiorders rename(Name name) {
        return new Emojiorders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
