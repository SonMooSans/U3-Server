/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Login;
import test.generated.tables.records.GroupdataRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Groupdata extends TableImpl<GroupdataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>login.groupdata</code>
     */
    public static final Groupdata GROUPDATA = new Groupdata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GroupdataRecord> getRecordType() {
        return GroupdataRecord.class;
    }

    /**
     * The column <code>login.groupdata.ID</code>.
     */
    public final TableField<GroupdataRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>login.groupdata.CreatorID</code>.
     */
    public final TableField<GroupdataRecord, Integer> CREATORID = createField(DSL.name("CreatorID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>login.groupdata.Avatar</code>.
     */
    public final TableField<GroupdataRecord, String> AVATAR = createField(DSL.name("Avatar"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>login.groupdata.Name</code>.
     */
    public final TableField<GroupdataRecord, String> NAME = createField(DSL.name("Name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>login.groupdata.description</code>.
     */
    public final TableField<GroupdataRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>login.groupdata.isPrivate</code>.
     */
    public final TableField<GroupdataRecord, Byte> ISPRIVATE = createField(DSL.name("isPrivate"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    private Groupdata(Name alias, Table<GroupdataRecord> aliased) {
        this(alias, aliased, null);
    }

    private Groupdata(Name alias, Table<GroupdataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>login.groupdata</code> table reference
     */
    public Groupdata(String alias) {
        this(DSL.name(alias), GROUPDATA);
    }

    /**
     * Create an aliased <code>login.groupdata</code> table reference
     */
    public Groupdata(Name alias) {
        this(alias, GROUPDATA);
    }

    /**
     * Create a <code>login.groupdata</code> table reference
     */
    public Groupdata() {
        this(DSL.name("groupdata"), null);
    }

    public <O extends Record> Groupdata(Table<O> child, ForeignKey<O, GroupdataRecord> key) {
        super(child, key, GROUPDATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Login.LOGIN;
    }

    @Override
    public Identity<GroupdataRecord, Integer> getIdentity() {
        return (Identity<GroupdataRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GroupdataRecord> getPrimaryKey() {
        return Keys.KEY_GROUPDATA_PRIMARY;
    }

    @Override
    public Groupdata as(String alias) {
        return new Groupdata(DSL.name(alias), this);
    }

    @Override
    public Groupdata as(Name alias) {
        return new Groupdata(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Groupdata rename(String name) {
        return new Groupdata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Groupdata rename(Name name) {
        return new Groupdata(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, String, String, Byte> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
