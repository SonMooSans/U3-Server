/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Login;
import test.generated.tables.records.GroupinviteRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Groupinvite extends TableImpl<GroupinviteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>login.groupinvite</code>
     */
    public static final Groupinvite GROUPINVITE = new Groupinvite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GroupinviteRecord> getRecordType() {
        return GroupinviteRecord.class;
    }

    /**
     * The column <code>login.groupinvite.targetID</code>.
     */
    public final TableField<GroupinviteRecord, Integer> TARGETID = createField(DSL.name("targetID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>login.groupinvite.SenderID</code>.
     */
    public final TableField<GroupinviteRecord, Integer> SENDERID = createField(DSL.name("SenderID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>login.groupinvite.GroupID</code>.
     */
    public final TableField<GroupinviteRecord, Integer> GROUPID = createField(DSL.name("GroupID"), SQLDataType.INTEGER.nullable(false), this, "");

    private Groupinvite(Name alias, Table<GroupinviteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Groupinvite(Name alias, Table<GroupinviteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>login.groupinvite</code> table reference
     */
    public Groupinvite(String alias) {
        this(DSL.name(alias), GROUPINVITE);
    }

    /**
     * Create an aliased <code>login.groupinvite</code> table reference
     */
    public Groupinvite(Name alias) {
        this(alias, GROUPINVITE);
    }

    /**
     * Create a <code>login.groupinvite</code> table reference
     */
    public Groupinvite() {
        this(DSL.name("groupinvite"), null);
    }

    public <O extends Record> Groupinvite(Table<O> child, ForeignKey<O, GroupinviteRecord> key) {
        super(child, key, GROUPINVITE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Login.LOGIN;
    }

    @Override
    public UniqueKey<GroupinviteRecord> getPrimaryKey() {
        return Keys.KEY_GROUPINVITE_PRIMARY;
    }

    @Override
    public Groupinvite as(String alias) {
        return new Groupinvite(DSL.name(alias), this);
    }

    @Override
    public Groupinvite as(Name alias) {
        return new Groupinvite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Groupinvite rename(String name) {
        return new Groupinvite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Groupinvite rename(Name name) {
        return new Groupinvite(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
