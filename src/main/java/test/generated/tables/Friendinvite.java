/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import test.generated.Keys;
import test.generated.Login;
import test.generated.tables.records.FriendinviteRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Friendinvite extends TableImpl<FriendinviteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>login.friendinvite</code>
     */
    public static final Friendinvite FRIENDINVITE = new Friendinvite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FriendinviteRecord> getRecordType() {
        return FriendinviteRecord.class;
    }

    /**
     * The column <code>login.friendinvite.senderID</code>.
     */
    public final TableField<FriendinviteRecord, Integer> SENDERID = createField(DSL.name("senderID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>login.friendinvite.targetID</code>.
     */
    public final TableField<FriendinviteRecord, Integer> TARGETID = createField(DSL.name("targetID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>login.friendinvite.InviteDate</code>.
     */
    public final TableField<FriendinviteRecord, LocalDateTime> INVITEDATE = createField(DSL.name("InviteDate"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Friendinvite(Name alias, Table<FriendinviteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Friendinvite(Name alias, Table<FriendinviteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>login.friendinvite</code> table reference
     */
    public Friendinvite(String alias) {
        this(DSL.name(alias), FRIENDINVITE);
    }

    /**
     * Create an aliased <code>login.friendinvite</code> table reference
     */
    public Friendinvite(Name alias) {
        this(alias, FRIENDINVITE);
    }

    /**
     * Create a <code>login.friendinvite</code> table reference
     */
    public Friendinvite() {
        this(DSL.name("friendinvite"), null);
    }

    public <O extends Record> Friendinvite(Table<O> child, ForeignKey<O, FriendinviteRecord> key) {
        super(child, key, FRIENDINVITE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Login.LOGIN;
    }

    @Override
    public UniqueKey<FriendinviteRecord> getPrimaryKey() {
        return Keys.KEY_FRIENDINVITE_PRIMARY;
    }

    @Override
    public Friendinvite as(String alias) {
        return new Friendinvite(DSL.name(alias), this);
    }

    @Override
    public Friendinvite as(Name alias) {
        return new Friendinvite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Friendinvite rename(String name) {
        return new Friendinvite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Friendinvite rename(Name name) {
        return new Friendinvite(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
