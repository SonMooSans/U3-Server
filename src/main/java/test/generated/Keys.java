/*
 * This file is generated by jOOQ.
 */
package test.generated;


import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import test.generated.tables.Customemoji;
import test.generated.tables.Emojiorders;
import test.generated.tables.Friend;
import test.generated.tables.Friendinvite;
import test.generated.tables.Groupdata;
import test.generated.tables.Groupinvite;
import test.generated.tables.Invitecode;
import test.generated.tables.Joingrouplog;
import test.generated.tables.Loginentry;
import test.generated.tables.Textmessage;
import test.generated.tables.Userdata;
import test.generated.tables.Verifyemail;
import test.generated.tables.records.CustomemojiRecord;
import test.generated.tables.records.EmojiordersRecord;
import test.generated.tables.records.FriendRecord;
import test.generated.tables.records.FriendinviteRecord;
import test.generated.tables.records.GroupdataRecord;
import test.generated.tables.records.GroupinviteRecord;
import test.generated.tables.records.InvitecodeRecord;
import test.generated.tables.records.JoingrouplogRecord;
import test.generated.tables.records.LoginentryRecord;
import test.generated.tables.records.TextmessageRecord;
import test.generated.tables.records.UserdataRecord;
import test.generated.tables.records.VerifyemailRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * login.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CustomemojiRecord> KEY_CUSTOMEMOJI_PRIMARY = Internal.createUniqueKey(Customemoji.CUSTOMEMOJI, DSL.name("KEY_customemoji_PRIMARY"), new TableField[] { Customemoji.CUSTOMEMOJI.ID }, true);
    public static final UniqueKey<EmojiordersRecord> KEY_EMOJIORDERS_PRIMARY = Internal.createUniqueKey(Emojiorders.EMOJIORDERS, DSL.name("KEY_emojiorders_PRIMARY"), new TableField[] { Emojiorders.EMOJIORDERS.USERID, Emojiorders.EMOJIORDERS.EMOJIID }, true);
    public static final UniqueKey<FriendRecord> KEY_FRIEND_PRIMARY = Internal.createUniqueKey(Friend.FRIEND, DSL.name("KEY_friend_PRIMARY"), new TableField[] { Friend.FRIEND.FIRSTUSERID, Friend.FRIEND.SECONDUSERID }, true);
    public static final UniqueKey<FriendinviteRecord> KEY_FRIENDINVITE_PRIMARY = Internal.createUniqueKey(Friendinvite.FRIENDINVITE, DSL.name("KEY_friendinvite_PRIMARY"), new TableField[] { Friendinvite.FRIENDINVITE.SENDERID, Friendinvite.FRIENDINVITE.TARGETID }, true);
    public static final UniqueKey<GroupdataRecord> KEY_GROUPDATA_PRIMARY = Internal.createUniqueKey(Groupdata.GROUPDATA, DSL.name("KEY_groupdata_PRIMARY"), new TableField[] { Groupdata.GROUPDATA.ID }, true);
    public static final UniqueKey<GroupinviteRecord> KEY_GROUPINVITE_PRIMARY = Internal.createUniqueKey(Groupinvite.GROUPINVITE, DSL.name("KEY_groupinvite_PRIMARY"), new TableField[] { Groupinvite.GROUPINVITE.TARGETID, Groupinvite.GROUPINVITE.SENDERID, Groupinvite.GROUPINVITE.GROUPID }, true);
    public static final UniqueKey<InvitecodeRecord> KEY_INVITECODE_PRIMARY = Internal.createUniqueKey(Invitecode.INVITECODE, DSL.name("KEY_invitecode_PRIMARY"), new TableField[] { Invitecode.INVITECODE.CODE }, true);
    public static final UniqueKey<JoingrouplogRecord> KEY_JOINGROUPLOG_PRIMARY = Internal.createUniqueKey(Joingrouplog.JOINGROUPLOG, DSL.name("KEY_joingrouplog_PRIMARY"), new TableField[] { Joingrouplog.JOINGROUPLOG.GROUPID, Joingrouplog.JOINGROUPLOG.USERID }, true);
    public static final UniqueKey<LoginentryRecord> KEY_LOGINENTRY_PRIMARY = Internal.createUniqueKey(Loginentry.LOGINENTRY, DSL.name("KEY_loginentry_PRIMARY"), new TableField[] { Loginentry.LOGINENTRY.EMAIL }, true);
    public static final UniqueKey<TextmessageRecord> KEY_TEXTMESSAGE_PRIMARY = Internal.createUniqueKey(Textmessage.TEXTMESSAGE, DSL.name("KEY_textmessage_PRIMARY"), new TableField[] { Textmessage.TEXTMESSAGE.MESSAGEID }, true);
    public static final UniqueKey<UserdataRecord> KEY_USERDATA_PRIMARY = Internal.createUniqueKey(Userdata.USERDATA, DSL.name("KEY_userdata_PRIMARY"), new TableField[] { Userdata.USERDATA.ID }, true);
    public static final UniqueKey<VerifyemailRecord> KEY_VERIFYEMAIL_PRIMARY = Internal.createUniqueKey(Verifyemail.VERIFYEMAIL, DSL.name("KEY_verifyemail_PRIMARY"), new TableField[] { Verifyemail.VERIFYEMAIL.EMAIL }, true);
}
